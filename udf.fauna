Update(Function("create_order"), {
  "body": Query(
    Lambda(
      ["input"],
      Let(
        { orderRef: Select("ref", Create(Collection("Order"), {
            data: {
              vendor: Ref(
                Collection("Vendor"),
                Select(["vendor", "connect"], Var("input"))
              ),
              status: Select("status", Var("input")),
              tokenNo: Call(
                Function("generate_token_no"),
                Ref(
                  Collection("Vendor"),
                  Select(["vendor", "connect"], Var("input"))
                )
              ),
              creationTime: Time("now"),
              orderBy: Identity()
            }
          })) },
        Do(
          Map(
            Select(["items", "create"], Var("input")),
            Lambda(
              ["item"],
              Create(Collection("OrderItem"), {
                data: {
                  item: Ref(
                    Collection("Item"),
                    Select(["item", "connect"], Var("item"))
                  ),
                  order: Var("orderRef"),
                  count: Select("count", Var("item"))
                }
              })
            )
          ),
		  Get(Var("orderRef"))
        )
      )
    )
  )
})

Update(Function("create_user"), {
  "body": Query(
    Lambda(["input"],
      Create(Collection("User"), {
        data: {
          username: Select("username", Var("input")),
          role: Select("role", Var("input")),
        },
        credentials: {
          password: Select("password", Var("input"))
        }
      })
    )
  )
})

Update(Function("login_user"), {
  "body": Query(
    Lambda(["input"],
      Select(
        "secret",
        Login(
          Match(Index("unique_User_username"), Select("username", Var("input"))),
          { password: Select("password", Var("input")) }
        )
      )
    )
  )
})

Update(Function("logout_user"), {
  "body": Query(
    Lambda([],
      Logout(true)
    )    
  )
})

Update(Function("update_order"), {
  "body": Query(
    Lambda(["input"],
      Update(
        Ref(Collection("Order"), Select("id", Var("input"))),
        { data: { status: Select("status", Var("input")) } }
      )
    )
  )
})

# generate_token_no 
CreateFunction({"name": "generate_token_no",
"body": Query(
  Lambda(["vendorRef"],
    Let({
      tokenRef: Select(["data", "token"], Get(Var("vendorRef")))
      },
      Do(
        Let(
          { tokenValue: Select(["data", "value"], Get(Var("tokenRef"))) },
          Update(
            Var("tokenRef"),
            { data: {
                value: If(GTE(Var("tokenValue"), 100), 1, Add(Var("tokenValue"), 1))
              }
            }
          )
        ),
        Select(["data", "value"], Get(Var("tokenRef")))
      )
    )
  )
)})

Update(Function("completed_orders"), {
  "body": Query(
    Lambda([],
      Select("data", Map(
        Paginate(
          Join(
            Match(Index("orders_search_by_status"), "STATUS_COMPLETE"),
            Index("orders_sort_by_creation_time_desc")
          )
        ),
        Lambda(["creationTime", "ref"], Get(Var("ref")))
      ))
    )
  )
})

Update(Function("queue_orders"), {
  "body": Query(
    Lambda([],
      Select("data",
        Map(
          Paginate(
            Join(
              Difference(
                Match(Index("all_orders")),
                Match(Index("orders_search_by_status"), "STATUS_COMPLETE"),
              ),
              Index("orders_sort_by_creation_time_desc")
            )
          ),
          Lambda(["creationTime", "ref"], Get(Var("ref")))
        )
      )
    )
  )
})

CreateIndex({
  "name": "orders_search_by_status",
  "source": Collection("Order"),
  "terms": [{ field: ["data", "status"] }]
})

CreateIndex({
  "name": "orders_sort_by_creation_time_desc",
  "source": Collection("Order"),
  "terms": [{ field: ["ref"] }],
  "values": [
    { field: ["data", "creationTime"], reverse: true },
    { field: ["ref"]}
  ]
})

CreateIndex({
  name: "orders_sort_by_status_and_creation_time_desc",
  source: {
    collection: Collection("Order"),
    fields: {
      isComplete: Query(
        Lambda(
          "doc",
          If(Equals(Select(["data", "status"], Var("doc")), "STATUS_COMPLETE"), 1, 0)
        )
      )
    }
  },
  terms: [{ field: ["ref"] }],
  "values": [
    { binding: "isComplete" },
    { field: ["data", "creationTime"], reverse: true },
    { field: ["ref"]}
  ]
})

Update(Function("all_orders"),
  {"body": Query(
    Lambda(["size", "afterCursor", "beforeCursor"],
      Map(
        Paginate(
          Join(
            Match(Index("all_orders")),
            Index("orders_sort_by_status_and_creation_time_desc")
          )
        ),
        Lambda(
          ["isComplete", "creationTime", "ref"],
          Get(Var("ref"))
        )
      )
    )
  )}
)


Update(Role("customer_role"), {
  name: "customer_role",
  membership: {
    resource: Collection("User"),
    predicate: Query(
      Lambda("userRef",
        Equals(Select(["data", "role"], Get(Var("userRef"))), "CUSTOMER")
      )
    )
  },
  privileges: [
    {
      resource: Collection("User"),
      actions: { read: true },
    },
    {
      resource: Collection("Vendor"),
      actions: { read: true }
    },
    {
      resource: Index("all_vendors"),
      actions: { read: true }
    },
    {
      resource: Index("orders_sort_by_status_and_creation_time_desc"),
      actions: { read: true }
    },
    {
      resource: Function("all_orders"),
      actions: { call: true }
    },
    {
      resource: Collection("Item"),
      actions: { read: true }
    },
    {
      resource: Index("item_orderItems_by_item"),
      actions: { read: true }
    },
    {
      resource: Index("item_vendor_by_vendor"),
      actions: { read: true }
    },
    {
      resource: Index("all_orders"),
      actions: { read: true }  
    },
    {
      resource: Collection("Order"),
      actions: {
        read: Query(
          Lambda("fileRef", Equals(Select(["data", "orderBy"], Get(Var("fileRef"))), Identity()))
        ),
        create: true
      }
    },
    {
      resource: Index("order_vendor_by_vendor"),
      actions: { read: true }
    },
    {
      resource: Index("orderItem_order_by_order"),
      actions: { read: true }
    },
    {
      resource: Collection("OrderItem"),
      actions: { read: true, create: true }
    },
    {
      resource: Function("create_order"),
      actions: { call: true }
    },
    {
      resource: Function("vendor_intl"),
      actions: { call: true }
    },
    {
      resource: Index("intl_by_vendor"),
      actions: { read: true }
    },
    {
      resource: Collection("Intl"),
      actions: { read: true }
    },
    {
      resource: Function("generate_token_no"),
      actions: { call: true }
    },
    {
      resource: Collection("Token"),
      actions: { read: true, write: true }
    },
    {
      resource: Function("logout_user"),
      actions: { call: true }
    },
  ]
})

Update(Role("vendor_role"), {
  name: "vendor_role",
  membership: {
    resource: Collection("User"),
    predicate: Query(
      Lambda("userRef",
        Equals(Select(["data", "role"], Get(Var("userRef"))), "VENDOR")
      )
    )
  },
  privileges: [
    {
      resource: Collection("Vendor"),
      actions: { read: true }
    },
    {
      resource: Index("all_vendors"),
      actions: { read: true }
    },
    {
      resource: Collection("Order"),
      actions: {
        read: Query(
          Lambda(["orderRef"], Equals(Select(["data", "owner"], Get(Select(["data", "vendor"], Get(Var("orderRef"))))), Identity()))
        ),
        write:  Query(
          Lambda(["prevOrderRef", "nextOrderRef"], Equals(Select(["data", "owner"], Get(Select(["data", "vendor"], Var("prevOrderRef")))), Identity()))
        )
      }
    },
    {
      resource: Index("all_orders"),
      actions: { read: true }
    },
    {
      resource: Index("orderItem_order_by_order"),
      actions: { read: true }
    },
    {
      resource: Collection("OrderItem"),
      actions: { read: true, create: true }
    },
    {
      resource: Collection("Item"),
      actions: { read: true }
    },
    {
      resource: Collection("User"),
      actions: { read: true }
    },
    {
      resource: Index("item_orderItems_by_item"),
      actions: { read: true }
    },
    {
      resource: Index("orders_search_by_status"),
      actions: { read: true }
    },
    {
      resource: Index("orders_sort_by_creation_time_desc"),
      actions: { read: true }
    },
    {
      resource: Function("update_order"),
      actions: { call: true }
    },
    {
      resource: Function("queue_orders"),
      actions: { call: true }
    },
    {
      resource: Function("completed_orders"),
      actions: { call: true }
    },
    {
      resource: Function("vendor_intl"),
      actions: { call: true }
    },
    {
      resource: Index("intl_by_vendor"),
      actions: { read: true }
    },
    {
      resource: Collection("Intl"),
      actions: { read: true }
    },
    {
      resource: Function("user_identity"),
      actions: { call: true }
    },
    {
      resource: Function("logout_user"),
      actions: { call: true }
    },
  ]
})

CreateIndex({
  "name": "intl_by_vendor",
  "source": Collection("Intl"),
  "terms": [{ field: ["data", "vendor"] }]
})

Update(Function("vendor_intl"), {
  "body": Query(
    Lambda(["vendorId"],
      Select("data", Map(
        Paginate(
          Match(
            Index("intl_by_vendor"),
            Ref(Collection("Vendor"), Var("vendorId"))
          )
        ),
        Lambda('x', Get(Var('x')))
      ))
    )
  )
})

Update(Function("user_identity"), {
  "body": Query(
    Lambda([],
      Get(Identity())
    )
  )
})
